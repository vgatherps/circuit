// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MDMESSAGE_H_
#define FLATBUFFERS_GENERATED_MDMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

struct MdMessage;
struct MdMessageBuilder;

struct MdMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MdMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCAL_TIME_US = 4,
    VT_MESSAGE_TYPE = 6,
    VT_MESSAGE = 8
  };
  int64_t local_time_us() const {
    return GetField<int64_t>(VT_LOCAL_TIME_US, 0);
  }
  RawMdMessage message_type() const {
    return static_cast<RawMdMessage>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const TradeUpdate *message_as_trades() const {
    return message_type() == RawMdMessage_trades ? static_cast<const TradeUpdate *>(message()) : nullptr;
  }
  const BboUpdate *message_as_bbo() const {
    return message_type() == RawMdMessage_bbo ? static_cast<const BboUpdate *>(message()) : nullptr;
  }
  const DepthUpdate *message_as_depth() const {
    return message_type() == RawMdMessage_depth ? static_cast<const DepthUpdate *>(message()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_LOCAL_TIME_US, 8) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyRawMdMessage(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const TradeUpdate *MdMessage::message_as<TradeUpdate>() const {
  return message_as_trades();
}

template<> inline const BboUpdate *MdMessage::message_as<BboUpdate>() const {
  return message_as_bbo();
}

template<> inline const DepthUpdate *MdMessage::message_as<DepthUpdate>() const {
  return message_as_depth();
}

struct MdMessageBuilder {
  typedef MdMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_local_time_us(int64_t local_time_us) {
    fbb_.AddElement<int64_t>(MdMessage::VT_LOCAL_TIME_US, local_time_us, 0);
  }
  void add_message_type(RawMdMessage message_type) {
    fbb_.AddElement<uint8_t>(MdMessage::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(MdMessage::VT_MESSAGE, message);
  }
  explicit MdMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MdMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MdMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<MdMessage> CreateMdMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t local_time_us = 0,
    RawMdMessage message_type = RawMdMessage_NONE,
    flatbuffers::Offset<void> message = 0) {
  MdMessageBuilder builder_(_fbb);
  builder_.add_local_time_us(local_time_us);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline const MdMessage *GetMdMessage(const void *buf) {
  return flatbuffers::GetRoot<MdMessage>(buf);
}

inline const MdMessage *GetSizePrefixedMdMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MdMessage>(buf);
}

inline bool VerifyMdMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MdMessage>(nullptr);
}

inline bool VerifySizePrefixedMdMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MdMessage>(nullptr);
}

inline void FinishMdMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MdMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMdMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MdMessage> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_MDMESSAGE_H_
