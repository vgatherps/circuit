// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BBOMESSAGE_H_
#define FLATBUFFERS_GENERATED_BBOMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

struct BboMessage;
struct BboMessageBuilder;

struct BboMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BboMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCAL_TIME_US = 4,
    VT_MESSAGE = 6
  };
  int64_t local_time_us() const {
    return GetField<int64_t>(VT_LOCAL_TIME_US, 0);
  }
  const DepthUpdate *message() const {
    return GetPointer<const DepthUpdate *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_LOCAL_TIME_US, 8) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyTable(message()) &&
           verifier.EndTable();
  }
};

struct BboMessageBuilder {
  typedef BboMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_local_time_us(int64_t local_time_us) {
    fbb_.AddElement<int64_t>(BboMessage::VT_LOCAL_TIME_US, local_time_us, 0);
  }
  void add_message(flatbuffers::Offset<DepthUpdate> message) {
    fbb_.AddOffset(BboMessage::VT_MESSAGE, message);
  }
  explicit BboMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<BboMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BboMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<BboMessage> CreateBboMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t local_time_us = 0,
    flatbuffers::Offset<DepthUpdate> message = 0) {
  BboMessageBuilder builder_(_fbb);
  builder_.add_local_time_us(local_time_us);
  builder_.add_message(message);
  return builder_.Finish();
}

inline const BboMessage *GetBboMessage(const void *buf) {
  return flatbuffers::GetRoot<BboMessage>(buf);
}

inline const BboMessage *GetSizePrefixedBboMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<BboMessage>(buf);
}

inline bool VerifyBboMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BboMessage>(nullptr);
}

inline bool VerifySizePrefixedBboMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BboMessage>(nullptr);
}

inline void FinishBboMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<BboMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBboMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<BboMessage> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_BBOMESSAGE_H_
