#include "io/streamer.hh"

// WTF why do I have to prefix this with include while other tests don't?
// Cmake is set up the same for both handwritten and autogenerated ones
#include <include/gtest/gtest.h>

#include <algorithm>
#include <tuple>
#include <vector>

class StreamerTest : public testing::TestWithParam<std::tuple<int, int>> {};

class VectorReader : public ByteReader {
  std::vector<char> data;
  std::size_t read_amount;

public:
  std::size_t read_bytes(char *into, std::size_t max_bytes) override {
    if (read_amount < data.size()) {
      std::size_t available = data.size() - read_amount;
      std::size_t to_read = std::min(available, max_bytes);
      memcpy(into, data.data() + read_amount, to_read);
      read_amount += to_read;
      assert(read_amount <= data.size());
      return to_read;
    }
    return 0;
  }

  VectorReader(int length) : read_amount(0) {
    for (int i = 0; i < length; i++) {
      data.push_back(i);
    }
  }
};

void test_streamer_load_contiguous(int vector_size, int initial_fetch,
                                   std::unique_ptr<ByteReader> reader) {

  std::vector<char> buffer;
  std::size_t read_into_buffer = 0;
  buffer.resize(vector_size);

  Streamer stream(std::move(reader));

  stream.fetch_up_to(initial_fetch);

  while (std::size_t read_this_round =
             stream.read_bytes(buffer.data() + read_into_buffer,
                               buffer.size() - read_into_buffer)) {

    read_into_buffer += read_this_round;
    EXPECT_LE(read_into_buffer, vector_size)
        << "Read more bytes than passed vector length";
    for (std::size_t i = 0; i < read_into_buffer; i++) {
      EXPECT_EQ(i, buffer[i])
          << "Index " << i << " got bad value in buffer " << buffer[i]
          << " with total bytes read " << read_into_buffer << " and "
          << read_this_round << " bytes read this round";
    }
  }

  EXPECT_EQ(vector_size, read_into_buffer)
      << "Exited read loop having only read " << read_into_buffer << " bytes "
      << " but needed to read " << vector_size << " bytes";
}

TEST_P(StreamerTest, TestStreamerLoadsFromBytes) {
  auto [vector_size, initial_fetch] = GetParam();
  test_streamer_load_contiguous(vector_size, initial_fetch,
                                std::make_unique<VectorReader>(vector_size));
}

TEST_P(StreamerTest, TestStreamerLoadsFromStreamer) {
  auto [vector_size, initial_fetch] = GetParam();
  auto vector_reader = std::make_unique<VectorReader>(vector_size);
  test_streamer_load_contiguous(
      vector_size, initial_fetch,
      std::make_unique<Streamer>(std::move(vector_reader)));
}

INSTANTIATE_TEST_SUITE_P(
    StreamTests, StreamerTest,
    ::testing::Combine(::testing::Values(1, 2, 4, 127), // vector length
                       ::testing::Values(0, 1, 2, 4,
                                         127) // initial fetch
                       ));